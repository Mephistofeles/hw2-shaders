// Modified by CnlPepper to implement per-pixel lighting

// NOTE: 1) Never bind a texture to texture unit 0 in the *light.st shaders as this will overwrite the shadow texture generated by the executable!
//       2) As only 4 textures can be used in a shader, only the specular channel from the glowOff texture is used, rather than interpolating glowOn and glowOff. All modellers should be aware that the specular channel for thrusters should not change significantly between the states. As it is not used in this pass, the same limit does not apply to the glow channel.

simple shadow(Texture $diffuse0, Texture $glow0, Texture $diffuseOn, Texture $glowOn, Texture $diffuseOff, Texture $glowOff, Colour $teambase, Colour $teamstripe, Colour $weight, Colour $fogColour, Colour $addColour, Colour $shadowColour)
{
    setCap depthBufferCap true
    setCap lightingCap true
    setCap cullCap true
    setCap gouraudCap true
    setCap texture1Cap true
    setCap texture0Cap true
    setCap fragmentProgramCap	true
    setCap separateSpecularCap	true

    setCap texgenSCap true
    setCap texgenTCap true
    setCap texgenRCap true
    setCap texgenQCap true

    setCap colourMaterialCap true
    setCap blendCap true

    srcBlend oneBlend
    destBlend zeroBlend

    material specular  1 1 1 1
    material shininess 96 96 96 96

    textureBind 1 $glow

    setFragmentProgram shadowAndLightFragmentProgram

    setProgramVarLocal fragmentProgram 0x4 $shadowColour
    setProgramVarLocal fragmentProgram 0x5 $addColour

}

simple base(Texture $diffuse0, Texture $glow0, Texture $diffuseOn, Texture $glowOn, Texture $diffuseOff, Texture $glowOff, Colour $teambase, Colour $teamstripe, Colour $weight, Colour $fogColour, Colour $addColour, Colour $shadowColour)
{
    setCap depthBufferCap true
    setCap gouraudCap true
    setCap cullCap true
    setCap texture1Cap true
    setCap texture2Cap true
    setCap texture3Cap true    
    setCap lightingCap true
    setCap blendCap true
    setCap vertexProgramCap true
    setCap fragmentProgramCap	true
    
    setCap texgenSCap true
    setCap texgenTCap true
    setCap texgenRCap true
    setCap texgenQCap true
    
    
    setVertexProgram asteroidVertexProgram0

    srcBlend	destColourBlend
    destBlend	zeroBlend

    fillMode solidFill
    cullMode backCull

    material ambient   1 1 1 1
    material diffuse   1 1 1 1
    material specular  1 1 1 1
    material shininess 30 30 30 30
    setVertexColour    1 1 1 1


    textureBind 1 $diffuseOn
    textureBind 2 $diffuseOff
    textureBind 3 $glowOff

    setFragmentProgram thrusterBasePassFragmentProgram

    setProgramVarLocal fragmentProgram 0x0 $weight
    setProgramVarLocal fragmentProgram 0x1 $teambase
    setProgramVarLocal fragmentProgram 0x2 $teamstripe
    setProgramVarLocal fragmentProgram 0x4  240  240  240 1	// glossiness scale
    setProgramVarLocal fragmentProgram 0x5   10   10   10 1	// glossiness bias (added)
}

compound thrusterLight()
{
    addPass shadow
    addPass base
}


